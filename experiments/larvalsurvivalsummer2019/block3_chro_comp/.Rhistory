geom_line()+
geom_point()+
geom_point(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, posiyion=jitter)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_point(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, position=jitter)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno)+
geom_jitter()
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_point(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno)+
geom_jitter()
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, width=0.25, height=0.25)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, width=0.5)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(width=0.5, aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species, width=0.5),data=plot.tablegeno)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, width=50)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, width=30, height=0)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, width=50, height=10)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, width=50, height=0.1)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, width=50, height=0.01)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, width=50, height=0)
#### leaf morphology plasticity ####
str(senecio.leaf)
ggplot(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species), data=plot.tablejo) +
geom_errorbar(aes(ymin=Survival.after.Winter..April.2018.-se, ymax=Survival.after.Winter..April.2018.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=Survival.after.Winter..April.2018., colour=Species),data=plot.tablegeno, width=20, height=0)
ggplot(aes(x=TGSite, y=complexity..perimeter.2.area., colour=Species), data=senecio.leaf) +
geom_errorbar(aes(ymin=complexity..perimeter.2.area.-se, ymax=complexity..perimeter.2.area.+se), width=.1) +
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=complexity..perimeter.2.area., colour=Species), data=senecio.leaf, width=50, height=0)
ggplot(aes(x=TGSite, y=complexity..perimeter.2.area., colour=Species), data=senecio.leaf)+
geom_line()+
geom_point()+
geom_jitter(aes(x=TGSite, y=complexity..perimeter.2.area., colour=Species), data=senecio.leaf, width=50, height=0)
ggplot(aes(x=TGSite, y=complexity..perimeter.2.area., colour=Species), data=senecio.leaf)+
geom_line()+
geom_point()+
geom_point(aes(x=TGSite, y=complexity..perimeter.2.area., colour=Species), data=senecio.leaf)
levels(senecio.leaf$TGSite) <- c("500","1000","1500", "2000")
senecio.leaf$TGSite <- as.numeric(levels(senecio.leaf$TGSite))[senecio.leaf$TGSite]
ggplot(aes(x=TGSite, y=complexity..perimeter.2.area., colour=Species), data=senecio.leaf)+
geom_line()+
geom_point()+
geom_point(aes(x=TGSite, y=complexity..perimeter.2.area., colour=Species), data=senecio.leaf)
setwd("/Users/michaeljardine/Desktop/Teaching/Plants")
## leaf morphology data
senecio.leaf <- read.csv("Experiment 1a Senecio transplant leaf data1.csv")
View(senecio.leaf)
str(senecio.leaf)
plot.tablegeno <- summarySE(senecio.surv, measurevar=c("Survival.after.Winter..April.2018."), groupvars=c("Genotype","TGSite", "Species"))
str(plot.tablegeno)
levels(plot.tablegeno$TGSite)
#### leaf morphology plasticity ####
str(senecio.leaf)
levels(senecio.leaf$TGSite) <- c("500","1000","1500", "2000")
senecio.leaf$TGSite <- as.numeric(levels(senecio.leaf$TGSite))[senecio.leaf$TGSite]
View(senecio.leaf)
View(SNP.1181.freqs.t)
## starting frequency information
start.freq <- 1:90
## starting frequency information
start.freq <- 1:90
for(i in 1:nrow(SNP.1181.freqs.t$cage)){
if(SNP.1181.freqs.t$cage[i]==1 | 3 | 5 | 7 | 9){
start.freq[i] <- "high S start"
} else{
start.freq[i] <- "low S start"
}
}
nrow(SNP.1181.freqs.t$cage)
for(i in 1:nrow(SNP.1181.freqs)){
if(SNP.1181.freqs.t$cage[i]==1 | 3 | 5 | 7 | 9){
start.freq[i] <- "high S start"
} else{
start.freq[i] <- "low S start"
}
}
start.freq
SNP.1521.freqs.t$month <- as.numeric(SNP.1521.freqs.t$month)
for(i in 1:nrow(SNP.1181.freqs)){
if(SNP.1181.freqs.t$cage[i]== 1 | 3 | 5 | 7 | 9){
start.freq[i] <- "high S start"
} else {
start.freq[i] <- "low S start"
}
}
start.freq
for(i in 1:nrow(SNP.1181.freqs)){
if(SNP.1181.freqs.t$cage[i] %% 2){
start.freq[i] <- "high S start"
} else {
start.freq[i] <- "low S start"
}
}
SNP.1181.freqs.t$month <- as.numeric(SNP.1181.freqs.t$month)
str(SNP.1181.freqs.t)
plot.SNP1181.groupmean <- ggplot(aes(x=month, y=frequency, colour=cage), data=SNP.1181.freqs.t)+
geom_line()+
geom_point()+
geom_point(aes(x=month, y=frequency, colour=Species), data=SNP.1181.freqs.t)
plot.SNP1181.groupmean
## starting frequency information
start.freq <- 1:90
for(i in 1:nrow(SNP.1181.freqs)){
if(SNP.1181.freqs.t$cage[i] %% 2){
start.freq[i] <- "high S start"
} else {
start.freq[i] <- "low S start"
}
}
for(i in 1:nrow(SNP.1181.freqs.t)){
if(SNP.1181.freqs.t$cage[i] %% 2){
start.freq[i] <- "high S start"
} else {
start.freq[i] <- "low S start"
}
}
start.freq
## starting frequency information
start.freq <- 1:90
for(i in 1:nrow(SNP.1181.freqs.t)){
if(SNP.1181.freqs.t$cage[i] %% 2){
start.freq[i] <- "high S start"
} else {
start.freq[i] <- "low S start"
}
}
SNP.1181.freqs.t$cage <- as.numeric(SNP.1181.freqs.t$cage)
## starting frequency information
start.freq <- 1:90
for(i in 1:nrow(SNP.1181.freqs.t)){
if(SNP.1181.freqs.t$cage[i] %% 2){
start.freq[i] <- "high S start"
} else {
start.freq[i] <- "low S start"
}
}
start.freq
### set working directory
setwd("/Users/michaeljardine/Desktop/DTP/Data and analysis/fruitless/Malecomp")
## PACKAGES
library(Rmisc)
library(lme4)
library(aod)
library(lsmeans)
library(ggplot2)
library(pbkrtest)
library(car)
Tcomp <- read.csv("ALL_3_BLOCKS_ALT.csv")
summary(Tcomp)
str(Tcomp)
## change Line to a factor
Tcomp$Line <- factor(Tcomp$Line)
## change Round to a factor
Tcomp$Round <- factor(Tcomp$Round)
## change Block to a factor
Tcomp$Block <- factor(Tcomp$Block)
str(Tcomp)
## remove NA
Tcomp <- na.omit(Tcomp)
str(Tcomp)
summary(Tcomp)
### change alleles fom M and F to S (short) and L (long)
levels(Tcomp$Allele) <- c("S", "L")
## change pupa to a 1/0 score to see who the winner is
Tcomp$winner <- ifelse(Tcomp$Pupa %in% c("T"), 0, 1)
## winner: competitor = 0 (Tub), focal = 1 (Norm)
str(Tcomp)
summary(Tcomp)
## combine the line and the genotype to create 5B/5D, 8B/8D etc - this is for the plots later on
Tcomp$Linegenotype <- interaction(Tcomp$Line, Tcomp$Genotype)
str(Tcomp)
## combine for genotype with introgressed part
Tcomp$Allelegenotype <- interaction(Tcomp$Allele, Tcomp$Genotype)
Tcomp$Lineblock <- interaction(Tcomp$Line, Tcomp$Block)
str(Tcomp)
## some summary statistics for means and errors
summarySE(Tcomp, measurevar=c("winner"), groupvars=c("Allele"))
summarySE(Tcomp, measurevar=c("winner"), groupvars=c("Line"))
summarySE(Tcomp, measurevar=c("winner"), groupvars=c("Genotype"))
summarySE(Tcomp, measurevar=c("winner"), groupvars=c("Linegenotype"))
summarySE(Tcomp, measurevar=c("winner"), groupvars=c("Allelegenotype"))
summarySE(Tcomp, measurevar=c("winner"), groupvars=c("Lineblock"))
Tcomp$linegenotype <- interaction(Tcomp$Line, Tcomp$Genotype)
Tcomp$BLG <- interaction(Tcomp$linegenotype, Tcomp$Block)
summarySE(Tcomp, measurevar=c("winner"), groupvars=c("BLG"))
View(Tcomp)
### extra tests splitting by balancer genotype
## analyse within each of the these balancer genotypes
balancersplit <- split(Tcomp, Tcomp$Genotype)
View(balancersplit)
compB <- balancersplitcomp[[1]]
compB <- balancersplitcomp[[1]]
### extra tests splitting by balancer genotype
## analyse within each of the these balancer genotypes
balancersplitcomp <- split(Tcomp, Tcomp$Genotype)
compB <- balancersplitcomp[[1]]
compD <- balancersplitcomp[[2]]
View(compD)
View(compB)
## B only models and tests
compB1 <- glmer(winner ~ 1 +  (1 | Line) + (1 | Block) + (1 | Round), data=compB, family=binomial(link=logit))
compB2 <- glmer(winner ~ Allele +  (1 | Line) + (1 | Block) + (1 | Round), data=compB, family=binomial(link=logit))
## B only models and tests
compB1 <- glmer(winner ~ 1 +  (1 | Line) + (1 | Block) + (1 | Round), data=compB, family=binomial(link=logit))
compB2 <- glmer(winner ~ Allele +  (1 | Line) + (1 | Block) + (1 | Round), data=compB, family=binomial(link=logit))
MC.allele.Bonly <- PBmodcomp(compB2, compB1, nsim=1000)
## D only models and tests
compD1 <- glmer(winner ~ 1 +  (1 | Line) + (1 | Block) + (1 | Round), data=compB, family=binomial(link=logit))
compD2 <- glmer(winner ~ Allele +  (1 | Line) + (1 | Block) + (1 | Round), data=compB, family=binomial(link=logit))
MC.allele.Donly <- PBmodcomp(compD2, compD1, nsim=1000)
MC.allele.Donly
MC.allele.Bonly
## D only models and tests
compD1 <- glmer(winner ~ 1 +  (1 | Line) + (1 | Block) + (1 | Round), data=compD, family=binomial(link=logit))
compD2 <- glmer(winner ~ Allele +  (1 | Line) + (1 | Block) + (1 | Round), data=compD, family=binomial(link=logit))
MC.allele.Donly <- PBmodcomp(compD2, compD1, nsim=1000)
MC.allele.Donly
#### reviewer suggestion to move block to a fixed effect
comp1.block <- glmer(winner ~ Block +  (1 | Line) + (1 | Round), data=Tcomp, family=binomial(link=logit))
comp2.block <- glmer(winner ~ Allele +  Block + (1 | Line) + (1 | Round), data=Tcomp, family=binomial(link=logit))
comp3.block <- glmer(winner ~ Genotype +   Block + (1 | Line) + (1 | Round), data=Tcomp, family=binomial(link=logit))
comp4.block <- glmer(winner ~ Allele + Genotype + Block + (1 | Line) + (1 | Round), data=Tcomp, family=binomial(link=logit))
comp5.block <- glmer(winner ~ Allele*Genotype + Block + (1 | Line) + (1 | Round), data=Tcomp, family=binomial(link=logit))
#### parametric bootstrapping ####
# based on model GLMM2.1
comp1 <- glmer(winner ~ 1 +  (1 | Line) + (1 | Block) + (1 | Round), data=Tcomp, family=binomial(link=logit))
comp2 <- glmer(winner ~ Allele +  (1 | Line) + (1 | Block) + (1 | Round), data=Tcomp, family=binomial(link=logit))
comp3 <- glmer(winner ~ Genotype +  (1 | Line) + (1 | Block) + (1 | Round), data=Tcomp, family=binomial(link=logit))
comp4 <- glmer(winner ~ Allele + Genotype +  (1 | Line) + (1 | Block) + (1 | Round), data=Tcomp, family=binomial(link=logit))
comp5 <- glmer(winner ~ Allele*Genotype +  (1 | Line) + (1 | Block) + (1 | Round), data=Tcomp, family=binomial(link=logit))
MC.allele.block <- PBmodcomp(comp4.block, comp3.block, nsim=1000)
MC.allele.Donly
View(compD)
str(compB)
str(compD)
str(Tcomp)
## D only models and tests
compD1 <- glmer(winner ~ 1 +  (1 | Line) + (1 | Block) + (1 | Round), data=compD, family=binomial(link=logit))
compD2 <- glmer(winner ~ Allele +  (1 | Line) + (1 | Block) + (1 | Round), data=compD, family=binomial(link=logit))
MC.allele.Donly <- PBmodcomp(compD2, compD1, nsim=1000)
MC.allele.Donly
MC.allele.Bonly
MC.allele.Donly
setwd("/Users/michaeljardine/Desktop/DTP/Data and analysis/fruitless/Eggs")
Teggs <- read.csv("All_egg_counts_blocks_1-3.csv")
str(Teggs)
### convert line to a factor with 6 levels
Teggs$line <- factor(Teggs$line)
str(Teggs)
### convert block to factor
Teggs$block <- factor(Teggs$block)
str(Teggs)
summary(Teggs)
### convert M and F alleles to long and short ( L and S) respectively
levels(Teggs$allele) <- c("S", "L")
### we have two numbers produced for the number eggs, predicted and corrected
x = Teggs$Predicted.count.
y = Teggs$Corrected.count.
cor(x, y)
par(mfrow=c(3,1))
hist(Teggs$Predicted.count.)
### bunched mostly towards zero try logging?
hist(log(Teggs$Predicted.count.))
### dosen't really help, now bunched towards the right - square rooting?
hist(sqrt(Teggs$Predicted.count.))
# some summary statistics for means and errors
summarySE(Teggs, measurevar=c("Predicted.count."), groupvars=c("allele"))
summarySE(Teggs, measurevar=c("Predicted.count."), groupvars=c("line"))
summarySE(Teggs, measurevar=c("Predicted.count."), groupvars=c("genotype"))
summarySE(Teggs, measurevar=c("Predicted.count."), groupvars=c("block"))
### later models will have an intercation between allele and genotype so we will get summary stats for this too
Teggs$allelegenotype <- interaction(Teggs$allele, Teggs$genotype)
summarySE(Teggs, measurevar=c("Predicted.count."), groupvars=c("allelegenotype"))
Teggs$linegenotype <- interaction(Teggs$line, Teggs$genotype)
Teggs$BLG <- interaction(Teggs$linegenotype, Teggs$block)
summarySE(Teggs, measurevar=c("Predicted.count."), groupvars=c("BLG"))
summarySE(Teggs, measurevar=c("Predicted.count."), groupvars=c("linegenotype"))
Teggs$blockline <- interaction(Teggs$line, Teggs$block)
summarySE(Teggs, measurevar=c("Predicted.count."), groupvars=c("blockline"))
### extra tests splitting by balancer genotype
## analyse within each of the these balancer genotypes
balancersplitegg <- split(Teggs, Teggs$genotype)
View(balancersplitegg)
eggB <- balancersplitegg[[1]]
eggD <- balancersplitegg[[2]]
str(eggB)
str(eggD)
## B only models and tests
eggB1 <- glmer(winner ~ 1 +  (1 | Line) + (1 | Block) + (1 | Round), data=eggB, family=binomial(link=logit))
## B only models and tests
eggB1 <- lmer(sqrt(Predicted.count.) ~ 1 + (1 | line) + (1 | block), data=eggB)
eggB2 <- lmer(sqrt(Predicted.count.) ~ allele + (1 | line) + (1 | block), data=eggB)
MC.allele.Bonly <- PBmodcomp(eggB2, eggB1, nsim=1000)
MC.allele.Bonly
## D only models and tests
eggD1 <- lmer(sqrt(Predicted.count.) ~ 1 + (1 | line) + (1 | block), data=eggD)
eggD2 <- lmer(sqrt(Predicted.count.) ~ allele + (1 | line) + (1 | block), data=eggD)
MC.allele.Donly <- PBmodcomp(eggD2, eggD1, nsim=1000)
MC.allele.Donly
MC.allele.Bonly
MC.allele.Donly
setwd("/Users/michaeljardine/Desktop/DTP/Data and analysis/fruitless/larvalsurvivalsummer2019/block3_chro_comp")
Larval.surv.chro <- read.csv("Larval survival chro compliment complete.csv")
str(Larval.surv.chro)
summary(Larval.surv.chro)
## calculating means to help interperate model results later
# firest create an interaction term between allele and genotype
Larval.surv.chro$allelechro <- interaction(Larval.surv.chro$allele, Larval.surv.chro$chro)
# means for total surviving offspring
summarySE(Larval.surv.chro, measurevar=c("total"), groupvars=c("allele"))
summarySE(Larval.surv.chro, measurevar=c("total"), groupvars=c("chro"))
summarySE(Larval.surv.chro, measurevar=c("total"), groupvars=c("allelechro"))
summarySE(Larval.surv.chro, measurevar=c("total"), groupvars=c("Line"))
# means for proportion surviving
summarySE(Larval.surv.chro, measurevar=c("propsurv"), groupvars=c("allele"))
summarySE(Larval.surv.chro, measurevar=c("propsurv"), groupvars=c("chro"))
summarySE(Larval.surv.chro, measurevar=c("propsurv"), groupvars=c("allelechro"))
summarySE(Larval.surv.chro, measurevar=c("propsurv"), groupvars=c("Line"))
# means for proportion male - sexratio
summarySE(Larval.surv.chro, measurevar=c("propmale"), groupvars=c("allele"))
summarySE(Larval.surv.chro, measurevar=c("propmale"), groupvars=c("chro"))
summarySE(Larval.surv.chro, measurevar=c("propmale"), groupvars=c("allelechro"))
summarySE(Larval.surv.chro, measurevar=c("propmale"), groupvars=c("Line"))
## Before startign the models create another interaction term
# 2 measures of each vial are present in the data set since offspring split at the pupa stage
Larval.surv.chro$vial_line <- interaction(Larval.surv.chro$Line, Larval.surv.chro$vial)
M.total.chro.1 <- lmer(total ~ allele*chro + (1 | Line) + (1 | vial_line), data=Larval.surv.chro)
### extra tests splitting by balancer genotype
## analyse within each of the these balancer genotypes
balancersplitesurv <- split(Larval.surv.chro, Larval.surv.chro$chro)
survB <- balancersplitsurv[[1]]
survD <- balancersplitsurv[[2]]
### extra tests splitting by balancer genotype
## analyse within each of the these balancer genotypes
balancersplitsurv <- split(Larval.surv.chro, Larval.surv.chro$chro)
survB <- balancersplitsurv[[1]]
survD <- balancersplitsurv[[2]]
str(survB)
str(survD)
## B only models and tests
survB1 <- lmer(propsurv ~ 1 + (1 | allele:Line) + (1 | vial_line), data=survB)
## B only models and tests
survB1 <- lmer(propsurv ~ 1 + (1 | allele:Line), data=survB)
survB2 <- lmer(propsurv ~ allele + (1 | allele:Line), data=survB)
MC.allele.Bonly <- PBmodcomp(survB2, survB1, nsim=1000)
MC.allele.Bonly
## D only models and tests
survD1 <- lmer(propsurv ~ 1 + (1 | allele:Line), data=survD)
survD2 <- lmer(propsurv ~ allele + (1 | allele:Line), data=survD)
MC.allele.Donly <- PBmodcomp(survD2, survD1, nsim=1000)
MC.allele.Donly
MC.allele.Bonly
MC.allele.Donly
## B only models and tests
SRB1 <- lmer(sqrt(propmale) ~ 1 + (1 | allele:Line) + (1 | vial_line), data=SRB)
### extra tests splitting by balancer genotype
## analyse within each of the these balancer genotypes
balancersplitSR <- split(Larval.surv.chro, Larval.surv.chro$chro)
SRB <- balancersplitSR[[1]]
SRD <- balancersplitSR[[2]]
str(SRB)
str(SRD)
## B only models and tests
SRB1 <- lmer(sqrt(propmale) ~ 1 + (1 | allele:Line) + (1 | vial_line), data=SRB)
## B only models and tests
SRB1 <- lmer(sqrt(propmale) ~ 1 + (1 | allele:Line), data=SRB)
SRB2 <- lmer(sqrt(propmale) ~ allele + (1 | allele:Line), data=SRB)
MC.allele.Bonly <- PBmodcomp(SRB2, SRB1, nsim=1000)
MC.allele.Bonly
## D only models and tests
SRD1 <- lmer(sqrt(propmale) ~ 1 + (1 | allele:Line), data=SRD)
SRD2 <- lmer(sqrt(propmale) ~ allele + (1 | allele:Line), data=SRD)
MC.allele.Donly <- PBmodcomp(SRD2, SRD1, nsim=1000)
MC.allele.Donly
MC.allele.Bonly
MC.allele.Donly
######################################################################################################
#### DEVELOPMENT TIME ####
# read it in
setwd("/Users/michaeljardine/Desktop/DTP/Data and analysis/fruitless/larvalsurvivalsummer2019/block3_chro_comp")
devtime <- read.csv("expanded_development_time_data.csv")
head(devtime)
summary(devtime)
str(devtime)
## first thing to make vial a factor, unique to each vial inthe experiment
devtime$line_chro <- interaction(devtime$lines, devtime$chro)
devtime$vial <- interaction(devtime$line_chro, devtime$vial)
str(devtime)
levels(devtime$vial)
### distribution of data
par(mfrow=c(1,2))
hist(devtime$eclosion_date)
hist(log(devtime$eclosion_date))
hist(devtime$total_from_vial)
hist(log(devtime$total_from_vial))
summarySE(devtime, measurevar=c("eclosion_date"), groupvars=c("sex"))
summarySE(devtime, measurevar=c("eclosion_date"), groupvars=c("lines"))
summarySE(devtime, measurevar=c("eclosion_date"), groupvars=c("chro"))
summarySE(devtime, measurevar=c("eclosion_date"), groupvars=c("allele"))
## create intraction between allele and sex
devtime$allele_sex <- interaction(devtime$allele, devtime$sex)
summarySE(devtime, measurevar=c("eclosion_date"), groupvars=c("allele_sex"))
# interaction for line and chro
devtime$allele_chro <- interaction(devtime$allele, devtime$chro)
summarySE(devtime, measurevar=c("eclosion_date"), groupvars=c("allele_chro"))
# interaction for sex and chro
devtime$sex_chro <- interaction(devtime$sex, devtime$chro)
summarySE(devtime, measurevar=c("eclosion_date"), groupvars=c("sex_chro"))
### extra tests splitting by balancer genotype
## analyse within each of the these balancer genotypes
balancersplitDT <- split(devtime, devtime$chro)
View(balancersplitDT)
DTB <- balancersplitDT[[1]]
DTD <- balancersplitDT[[2]]
str(DTB)
str(DTD)
## B only models and tests
DTB1 <- lmer(log(eclosion_date) ~ allele + (1 | vial) + (1 | lines), data = DTB)
DTB2 <- lmer(log(eclosion_date) ~ sex (1 | vial) + (1 | lines), data = DTB)
DTB2 <- lmer(log(eclosion_date) ~ sex + (1 | vial) + (1 | lines), data = DTB)
DTB3 <- lmer(log(eclosion_date) ~ allele + sex + (1 | vial) + (1 | lines), data = DTB)
DTB4 <- lmer(log(eclosion_date) ~ allele*sex + (1 | vial) + (1 | lines), data = DTB)
## D only models and tests
DTD1 <- lmer(log(eclosion_date) ~ allele + (1 | vial) + (1 | lines), data = DTD)
DTD2 <- lmer(log(eclosion_date) ~ sex + (1 | vial) + (1 | lines), data = DTD)
DTD3 <- lmer(log(eclosion_date) ~ allele + sex + (1 | vial) + (1 | lines), data = DTD)
DTD4 <- lmer(log(eclosion_date) ~ allele*sex + (1 | vial) + (1 | lines), data = DTD)
## D only models and tests
DTD1 <- lmer(log(eclosion_date) ~ allele + (1 | vial) + (1 | lines), data = DTD)
DTD2 <- lmer(log(eclosion_date) ~ sex + (1 | vial) + (1 | lines), data = DTD)
DTD3 <- lmer(log(eclosion_date) ~ allele + sex + (1 | vial) + (1 | lines), data = DTD)
DTD4 <- lmer(log(eclosion_date) ~ allele*sex + (1 | vial) + (1 | lines), data = DTD)
MC.allele.Bonly <- PBmodcomp(DTB3, DTB1, nsim=1000)
MC.allele.Bonly
MC.sex.Bonly <- PBmodcomp(DTB3, DTB2, nsim=1000)
MC.allele.Bonly <- PBmodcomp(DTB3, DTB2, nsim=1000)
MC.allele.Bonly
MC.inter.Bonly <- PBmodcomp(DTB4, DTB3, nsim=1000)
MC.inter.Bonly
MC.sex.Donly <- PBmodcomp(DTD3, DTD1, nsim=1000)
MC.sex.Donly
MC.allele.Donly <- PBmodcomp(DTD3, DTD2, nsim=1000)
MC.allele.Donly
MC.inter.Donly <- PBmodcomp(DTD4, DTD3, nsim=1000)
MC.inter.Donly
MC.sex.Bonly <- PBmodcomp(DTB3, DTB1, nsim=1000)
MC.sex.Bonly
MC.allele.Bonly
MC.inter.Bonly
MC.sex.Donly
source('~/Desktop/DTP/Data and analysis/fruitless/larvalsurvivalsummer2019/block3_chro_comp/chro comp larval survival.R', echo=TRUE)
MC.allele.Donly
MC.sex.Donly
MC.allele.Donly
MC.inter.Donly
